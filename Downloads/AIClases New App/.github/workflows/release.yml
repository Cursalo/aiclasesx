name: 🚀 Release Management

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      dry_run:
        description: 'Dry run (do not create actual release)'
        required: false
        default: false
        type: boolean

concurrency:
  group: release
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Prepare release
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.version.outputs.new_version }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Check if release is needed
        id: check
        run: |
          # Check for conventional commit patterns
          COMMITS=$(git log --oneline --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline --pretty=format:"%s")
          
          if echo "$COMMITS" | grep -E "^(feat|fix|perf|BREAKING CHANGE)" || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "✅ Release is needed"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No release needed"
          fi

      - name: 📝 Determine version
        id: version
        if: steps.check.outputs.should_release == 'true'
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine version bump
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ inputs.release_type }}"
          else
            # Auto-detect from commit messages
            COMMITS=$(git log --oneline --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline --pretty=format:"%s")
            
            if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          # Calculate new version
          npx semver $CURRENT_VERSION -i $BUMP_TYPE > new_version.txt
          NEW_VERSION=$(cat new_version.txt)
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ contains(inputs.release_type, 'prerelease') }}" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: 📋 Generate release notes
        id: notes
        if: steps.check.outputs.should_release == 'true'
        run: |
          echo "📋 Generating release notes..."
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" --reverse | head -20)
          fi
          
          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep "^- feat" | sed 's/^- feat: /- ✨ /' || echo "")
          FIXES=$(echo "$COMMITS" | grep "^- fix" | sed 's/^- fix: /- 🐛 /' || echo "")
          PERF=$(echo "$COMMITS" | grep "^- perf" | sed 's/^- perf: /- ⚡ /' || echo "")
          DOCS=$(echo "$COMMITS" | grep "^- docs" | sed 's/^- docs: /- 📚 /' || echo "")
          OTHERS=$(echo "$COMMITS" | grep -v "^- (feat|fix|perf|docs)" | sed 's/^- /- 🔧 /' || echo "")
          
          # Build release notes
          cat > release_notes.md << EOF
          ## 🚀 AIClases v${{ steps.version.outputs.new_version }}
          
          ### What's New
          
          EOF
          
          if [ -n "$FEATURES" ]; then
            echo "### ✨ New Features" >> release_notes.md
            echo "$FEATURES" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ -n "$FIXES" ]; then
            echo "### 🐛 Bug Fixes" >> release_notes.md
            echo "$FIXES" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ -n "$PERF" ]; then
            echo "### ⚡ Performance Improvements" >> release_notes.md
            echo "$PERF" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ -n "$DOCS" ]; then
            echo "### 📚 Documentation" >> release_notes.md
            echo "$DOCS" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ -n "$OTHERS" ]; then
            echo "### 🔧 Other Changes" >> release_notes.md
            echo "$OTHERS" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "### 🔗 Links" >> release_notes.md
          echo "- [Full Changelog](https://github.com/${{ github.repository }}/compare/${LAST_TAG:-$(git rev-list --max-parents=0 HEAD)}...v${{ steps.version.outputs.new_version }})" >> release_notes.md
          echo "- [Deployment](https://aiclases.com)" >> release_notes.md
          
          # Save release notes
          cat release_notes.md
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Job 2: Create release
  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: needs.prepare-release.outputs.should_release == 'true' && !inputs.dry_run
    timeout-minutes: 15
    
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_id: ${{ steps.release.outputs.id }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📝 Update package version
        run: |
          npm version ${{ needs.prepare-release.outputs.new_version }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to v${{ needs.prepare-release.outputs.new_version }}"

      - name: 🏗️ Build release assets
        run: |
          pnpm run build
          
          # Create release archive
          tar -czf aiclases-v${{ needs.prepare-release.outputs.new_version }}.tar.gz \
            .next/ package.json next.config.js public/ \
            --exclude='.next/cache'

      - name: 🏷️ Create Git tag
        run: |
          git tag -a v${{ needs.prepare-release.outputs.new_version }} -m "Release v${{ needs.prepare-release.outputs.new_version }}"
          git push origin v${{ needs.prepare-release.outputs.new_version }}

      - name: 🎉 Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          release_name: AIClases v${{ needs.prepare-release.outputs.new_version }}
          body: ${{ needs.prepare-release.outputs.release_notes }}
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}

      - name: 📤 Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./aiclases-v${{ needs.prepare-release.outputs.new_version }}.tar.gz
          asset_name: aiclases-v${{ needs.prepare-release.outputs.new_version }}.tar.gz
          asset_content_type: application/gzip

  # Job 3: Update documentation
  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.should_release == 'true' && !inputs.dry_run
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📚 Update CHANGELOG
        run: |
          # Update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Prepare new entry
          NEW_ENTRY="## [v${{ needs.prepare-release.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }}) - $(date +%Y-%m-%d)"
          
          # Create temp file with new entry
          {
            echo "# Changelog"
            echo ""
            echo "$NEW_ENTRY"
            echo ""
            echo "${{ needs.prepare-release.outputs.release_notes }}" | tail -n +3
            echo ""
            tail -n +3 CHANGELOG.md
          } > CHANGELOG.tmp
          
          mv CHANGELOG.tmp CHANGELOG.md

      - name: 📝 Update README version badges
        run: |
          # Update version badge in README
          if [ -f README.md ]; then
            sed -i "s/version-[^-]*-/version-v${{ needs.prepare-release.outputs.new_version }}-/g" README.md
          fi

      - name: 💾 Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md README.md
          git commit -m "docs: update changelog and version badges for v${{ needs.prepare-release.outputs.new_version }}" || echo "No changes to commit"
          git push

  # Job 4: Post-release actions
  post-release:
    name: 🎊 Post-Release Actions
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, update-docs]
    if: needs.prepare-release.outputs.should_release == 'true' && !inputs.dry_run
    timeout-minutes: 10
    
    steps:
      - name: 🎊 Celebrate release
        run: |
          echo "🎉 Successfully released AIClases v${{ needs.prepare-release.outputs.new_version }}!"
          echo ""
          echo "📦 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }}"
          echo "🚀 Live site: https://aiclases.com"
          echo "📊 Deployment: Will be automatically deployed via deployment workflow"

      - name: 💬 Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          username: 'Release Bot'
          icon_emoji: ':rocket:'
          text: |
            🎉 **New Release: AIClases v${{ needs.prepare-release.outputs.new_version }}**
            
            🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }})
            🚀 [Live Site](https://aiclases.com)
            
            The new version is now being deployed to production!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != ''

      - name: 📊 Create release summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ needs.prepare-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** [View on GitHub](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "**Live Site:** [aiclases.com](https://aiclases.com)" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Automatic deployment to production is in progress" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployment status in the [deployment workflow]" >> $GITHUB_STEP_SUMMARY
          echo "- Verify the release on the live site" >> $GITHUB_STEP_SUMMARY

  # Job 5: Dry run summary
  dry-run-summary:
    name: 🧪 Dry Run Summary
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: inputs.dry_run && needs.prepare-release.outputs.should_release == 'true'
    
    steps:
      - name: 📋 Show what would happen
        run: |
          echo "## 🧪 Dry Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**This was a dry run. No actual release was created.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Would create version:** v${{ needs.prepare-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Would be prerelease:** ${{ needs.prepare-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Release Notes Preview" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.prepare-release.outputs.release_notes }}" >> $GITHUB_STEP_SUMMARY